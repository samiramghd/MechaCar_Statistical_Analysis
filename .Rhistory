setwd("C:/Users/Owner/Desktop/data/MechaCar_Statistical_Analysis")
setwd("C:/Users/Owner/Desktop/data/MechaCar_Statistical_Analysis")
library(dplyr)
library(dplyr)
MechaCar <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
View(MechaCar)
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=MechaCar)
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=MechaCar))
### Deliverable 1: Linear Regression to Predict MPG
# Add library() function to load the dplyr
library(dplyr)
### Deliverable 1: Linear Regression to Predict MPG
# Add library() function to load the dplyr
library(dplyr)
# Import and read in the MechaCar_mpg.csv
MechaCar <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
# Perform linear regression using the lm() function
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=MechaCar)
# Using the summary() function, determine the p-value and the r-squared value
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=MechaCar))
Suspension <- read.csv(file='Suspension_Coil.csv',check.names=F,stringsAsFactors = F)
# a total_summary dataframe using the
View(Suspension)
# a total_summary dataframe using the summarize() function
total_summary <- Suspension %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep')
View(total_summary)
oup_by() and the summarize() functions
lot_summary <- Suspension %>% group_by(Manufacturing_lot) %>% summarize(Mean=mean(PSI),
Median=median(PSI),
Variance=var(PSI),
SD=sd(PSI),
.groups = 'keep')
# a lot_summary dataframe using the group_by() and the summarize() functions
lot_summary <- Suspension %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),
Median=median(PSI),
Variance=var(PSI),
SD=sd(PSI),
.groups = 'keep')
View(lot_summary)
?t.test()
# using the t.test() function for all Lots
t.test(Suspension$PSI,mu=1500)
t.test(Suspension$PSI,mu=mean(Suspension$PSI))
# using the t.test() function for all Lots
t.test(Suspension$PSI,mu=1500)
t.test(subset(Suspension$PSI,Suspension$Manufacturing_Lot == "Lot1"),mu=1500)
# using the t.test() function for all Lots
t.test(Suspension$PSI,mu=1500)
# using the t.test() function for Lot1
t.test(subset(Suspension$PSI,Suspension$Manufacturing_Lot == "Lot1"),mu=1500)
# using the t.test() function for Lot2
t.test(subset(Suspension$PSI,Suspension$Manufacturing_Lot == "Lot2"),mu=1500)
# using the t.test() function for Lot3
t.test(subset(Suspension$PSI,Suspension$Manufacturing_Lot == "Lot3"),mu=1500)
### Deliverable 1: Linear Regression to Predict MPG
# Add library() function to load the dplyr
library(dplyr)
# Import and read in the MechaCar_mpg.csv
MechaCar <- read.csv(file='MechaCar_mpg.csv',
check.names=F,stringsAsFactors = F)
# Perform linear regression using the lm() function
lm(mpg ~ vehicle_length +
vehicle_weight +
spoiler_angle +
ground_clearance + AWD,data=MechaCar)
# Using the summary() function, determine the p-value and the r-squared value
summary(lm(mpg ~ vehicle_length +
vehicle_weight +
spoiler_angle +
ground_clearance + AWD,data=MechaCar))
### Deliverable 2: Create Visualizations for the Trip Analysis
# import and read in the Suspension_Coil.csv file as a table
Suspension <- read.csv(file='Suspension_Coil.csv',
check.names=F,
stringsAsFactors = F)
# a total_summary dataframe using the summarize() function
total_summary <- Suspension %>% summarize(Mean=mean(PSI),
Median=median(PSI),
Variance=var(PSI),
SD=sd(PSI),
.groups = 'keep')
# a lot_summary dataframe using the group_by() and the summarize() functions
lot_summary <- Suspension %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),
Median=median(PSI),
Variance=var(PSI),
SD=sd(PSI),
.groups = 'keep')
### Deliverable 3: T-Tests on Suspension Coils
# using the t.test() function for all Lots
t.test(Suspension$PSI,mu=1500)
# using the t.test() function for Lot1
t.test(subset(Suspension$PSI,Suspension$Manufacturing_Lot == "Lot1"),mu=1500)
# using the t.test() function for Lot2
t.test(subset(Suspension$PSI,Suspension$Manufacturing_Lot == "Lot2"),mu=1500)
# using the t.test() function for Lot3
t.test(subset(Suspension$PSI,Suspension$Manufacturing_Lot == "Lot3"),mu=1500)
